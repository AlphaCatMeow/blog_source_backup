[{"categories":["算法与数据结构"],"content":"学习算法与数据结构中的二叉树知识点，掌握Python3解答，提升编程能力！了解二叉树的概念和遍历方式，学会Python3实现，为你的编程之路保驾护航！解决二叉树相关题目，学习Python3编程技巧，让你的代码更加高效！","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"二叉树知识点梳理 如果你正在学习算法与数据结构，那么二叉树肯定是一个非常重要的知识点。在这篇文章中，我将为你梳理二叉树相关的知识点，并提供使用Python3语言解答的示例题目。 ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:0:0","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"什么是二叉树？ 二叉树是一种树状结构，每个节点最多只有两个子节点，分别为左子节点和右子节点。二叉树有很多种形态，包括平衡二叉树、完全二叉树、满二叉树等等。 ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:1:0","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"二叉树的遍历方式 遍历二叉树的方式有三种：前序遍历、中序遍历和后序遍历。其中，前序遍历的顺序是先遍历根节点，然后遍历左子树，最后遍历右子树；中序遍历的顺序是先遍历左子树，然后遍历根节点，最后遍历右子树；后序遍历的顺序是先遍历左子树，然后遍历右子树，最后遍历根节点。 ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:2:0","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"二叉树的应用场景 二叉树在很多领域都有着广泛的应用，比如计算机网络中的路由表、文件系统中的文件目录结构、数据库中的索引结构等等。 ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:3:0","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"使用Python3解答二叉树相关题目 下面提供两个使用Python3语言解答的二叉树相关题目： ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:4:0","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"题目一：二叉树的最大深度 给定一个二叉树，找出其最大深度。最大深度指的是从根节点到最远叶子节点的最长路径上的节点数。 示例： 输入：root = [3,9,20,null,null,15,7] 输出：3 解释：二叉树如下所示： 3 / \\ 9 20 / \\ 15 7 最长路径为 3 → 20 → 7，因此最大深度为 3。 Python3代码如下： class Solution: def maxDepth(self, root: Optional[TreeNode]) -\u003e int: if not root: return 0 return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1 ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:4:1","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"题目二：判断二叉树是否对称 给定一个二叉树，检查它是否是镜像对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。 1 / \\ 2 2 / \\ / \\ 3 4 4 3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的: 1 / \\ 2 2 \\ \\ 3 3 Python3代码如下： class Solution: def isSymmetric(self, root: Optional[TreeNode]) -\u003e bool: def isMirror(left: Optional[TreeNode], right: Optional[TreeNode]) -\u003e bool: if not left and not right: return True if not left or not right: return False return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left) if not root: return True return isMirror(root.left, root.right) ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:4:2","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":"总结 二叉树是算法与数据结构中非常重要的知识点，它有着广泛的应用场景。在本文中，我们梳理了二叉树的基本概念和遍历方式，并提供了两个使用Python3语言解答的二叉树相关题目。希望本文对大家学习二叉树有所帮助。 ","date":"2023-03-11","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%911/:5:0","tags":["算法与数据结构","二叉树","算法","数据结构","Python3","编程技巧"],"title":"二叉树（1）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%911/"},{"categories":["算法与数据结构"],"content":" 三角形的定义：由三条不在同一直线上的三条线段组成首尾相连的平面图形叫做三角形；三角形的顶点；三角形的边、内角 三角形的高、中线与角平分线、三角形的稳定性；锐角三角形的三条高线交于一点，三条高线都在三角形的内部；直角三角形的高交于直角顶点；钝角三角形的高不相交于一点，它们所在的直线相交于一点。 三角形的内角；三角形内角和是180度；三角形的外角 多边形及其内角和；正多边形内角和都相等，正多边形的每条边都相等 全等三角形：能够完全重合的两个三角形叫做全等三角形 ","date":"2023-06-10","objectID":"/%E5%88%9D%E4%BA%8C%E6%95%B0%E5%AD%A6/:0:0","tags":["算法与数据结构"],"title":"初二数学","uri":"/%E5%88%9D%E4%BA%8C%E6%95%B0%E5%AD%A6/"},{"categories":["算法与数据结构"],"content":" 正数和负数 有理数 数轴 相反数 绝对值 有理数的加减法 有理数的乘法 有理数的除法 乘方$2^8 = 256$ 科学计数法 $300000=3×10^5$, $260000000=2.6×10^8$ 近似数 整式$a×10=10a$。$log_i10$。单项式与多项式统称为整式 单项式：数与字母的乘积，单独一个数字或单独的一个字母也是单项式，前面的数字叫做这个单项式的系数。所有字母的指数的和叫做单项式的次数。 多项式：几个单项式的和叫做多项式，每个单项式叫做这个多项式的项。多项式里次数最高的单项式的次数，叫做这个多项式的次数。多项式的每一项都包括前面的符号。不含字母的项叫做常数项 整式的加减乘除（注意项数，注意各项的符号） 一元一次方程：含有未知数的等式叫做方程。包含一个未知数且最高次数为1的等式叫做一元一次方程 等式的性质：1.等式两边加或减同一个数或式子，结果仍相等；2.等式两边乘同一个数或除以同一个不为0的数，结果仍相等 合并同类项：字母不变，系数相加减；移项 立体图形与平面图形：长方体、正方体、圆柱体、球、圆锥体、三棱柱、六棱柱、三棱锥等，这些几何图形各个部分不都在同一个平面内，因此被称为立体图形 点、线、面、体 直线、射线、线段 角，角的比较与运算，余角：两角之和为90°；补角：两角之和为180°。 相交线：如果两条直线只有一个公共点，这两条直线就被称为相交线；两个相邻角的特点：有一条公共边，角的另一边互为反向延长线；对顶角的特点：顶点相同，角的两边互为反向延长线，且两个对顶角成对出现，对顶角相等； 同位角：两角在截线的同侧，并且在被截线的同一方；内错角：两角在截线的两侧，且在两被截直线之间的角为内错角；同旁内角：两角在截线的同侧，且在两被截线之间的角为同旁内角。 平行线：同一平面内，不相交的两条直线互为平行线；如果两条直线都与第三条直线平行，则两直线平行，同位角相等，两直线平行，内错角相等，两直线平行，同旁内角互补，两直线平行，同一平面内垂直于同一直线的条直线平行。 命题：能够判断真假的语句叫做命题；如果题设成立，结论一定成立，则该命题为真命题，如果结论不一定成立，则为假命题；经过推理证明得到的真命题叫做定理，推理的过程叫做证明。 算数平方根：如果一个正数x的平方等于a，即 $x^2=a$ ，那么正数x叫做a的算数平方根 $√4=2$ ；如果 $x^2=a$ ，那么x就叫做a的平方根（二次方根）；求一个数a的平方根的运算，叫做开平方，a叫做被开方数。平方与开平方互为逆运算。 立方根：一个数的立方等于啊，这个数就叫做a的立方根，也叫做a的三次方根，记作 $^3√a$，其中3叫做根指数，不能省略。求一个数立方根的运算叫做开立方。 实数：有理数都可以写成有限小数或无限循环小数，任何有限小数或无限循环小数都是有理数；无限不循环的小数叫做无理数；有理数和无理数统称实数 有序数对 平面直角坐标系，用坐标表示地理位置，用坐标表示平移 二元一次方程，二元一次方程组，三元一次方程组，带入消元法，加减消元法 不等式及其解集 一元一次不等式组 统计调查 直方图 ","date":"2023-03-13","objectID":"/%E5%88%9D%E4%B8%80%E6%95%B0%E5%AD%A6/:0:0","tags":["算法与数据结构"],"title":"初一数学","uri":"/%E5%88%9D%E4%B8%80%E6%95%B0%E5%AD%A6/"},{"categories":["算法与数据结构"],"content":"算法学习先从简单题目开始刷起 算法学习，我个人认为建立学习的兴趣和信心最重要，所以先从简单题开始刷起，而越是简单的题目就越能直戳算法题目的本质，直指核心要点，只有这样才能快速培养起来我们对于算法问题的本质的熟悉度，这样看到中等难度或者高难度的题目也能很快分析出这道题目的本质考点，才能有思路解决问题，当一道题有了思路，剩下的就是代码的编写和堆砌了，这一部分考验的是对编程语言的熟悉程度，因此也要求我们对于用来解答问题使用的编程语言也要非常熟悉才行，这就需要大量的使用和练习了。 ","date":"2023-03-12","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%912/:0:0","tags":["算法与数据结构"],"title":"二叉树（2）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%912/"},{"categories":["算法与数据结构"],"content":"简单题目先从二叉树开始刷起 为什么这么说，因为二叉树算是数据结构以及算法最基本的最容易解答的一类题目了，其他的N叉树，也是从二叉树基础上进行扩展而来，用来入门和练手一定是最适合的题目类型了。 ","date":"2023-03-12","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%912/:1:0","tags":["算法与数据结构"],"title":"二叉树（2）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%912/"},{"categories":["算法与数据结构"],"content":"第一题.力扣104.二叉树的最大深度 给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 示例： 给定二叉树 [3,9,20,null,null,15,7]， 3 / \\ 9 20 / \\ 15 7 返回它的最大深度 3 。 解题思路 深度优先搜索（Depth First Search） 找出终止条件：当前节点为空 找出返回值：节点为空时说明高度为0，所以返回0，节点不为空时则分别求左右子树的高度的最大值，同时加1表示当前节点的高度，返回该数值 某层的执行过程：在返回值部分基本已经描述清楚 时间复杂度：O(n) 题解(Python)： class Solution: def maxDepth(self, root: Optional[TreeNode]) -\u003e int: if not root: return 0 L = self.maxDepth(root.left) R = self.maxDepth(root.right) return max(L, R) + 1 ","date":"2023-03-12","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%912/:1:1","tags":["算法与数据结构"],"title":"二叉树（2）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%912/"},{"categories":["算法与数据结构"],"content":"第二题.力扣144.二叉树的前序遍历 输入：root = [1,2] 输出：[1,2] 示例： 输入：root = [1,null,2] 输出：[1,2] 提示： 树中节点数目在范围 [0, 100] 内 -100 \u003c= Node.val \u003c= 100 解题思路: 广度优先搜索（Breadth First Search） 题解(Python): # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def inorderTraversal(self, root): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" res = [] def helper(root): if not root: return helper(root.left) res.append(root.val) helper(root.right) helper(root) return res ","date":"2023-03-12","objectID":"/%E4%BA%8C%E5%8F%89%E6%A0%912/:1:2","tags":["算法与数据结构"],"title":"二叉树（2）","uri":"/%E4%BA%8C%E5%8F%89%E6%A0%912/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]